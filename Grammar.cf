entrypoints Program;

-- Program is a list of definitions
PDefs. 		Program		::= [Def] ;
terminator Def "" ;

-- Definitions
DefFun. 	Def				::= TypeC Id "(" [Arg] ")" Body ;
DefFun2. 	Def				::= TypeC Id "(" TypeC ")" ";" ;
DefUsing.	Def				::= "using" QConst ";" ; --2
DefTypedef.	Def				::= "typedef" Id  Id ";" ; --2

separator	Arg "," ;

ADel. 		Arg				::= TypeC ;
ADecl. 		Arg				::= TypeC Id ;
--Aref.		Arg				::= "*" Id;


-- Statements

SDecl. 		Stm				::= TypeC Id ";" ;
SDecls. 		Stm				::= TypeC Id "," [Id] ";" ;
SInit. 		Stm				::= TypeC Id "=" Exp ";" ;
SInit2. 		Stm				::= TypeC Id "=" Exp "," Id "=" Exp ";" ;  --2
SReturn. 	Stm				::= "return" Exp ";" ;
SWhile. 		Stm			    	::= "while" "(" Exp ")" Stm ;
SWhile2. 	Stm			    	::= "while" "(" Exp ")" ";" ;
SBlock. 		Stm				::= "{" [Stm] "}" ;
SIf. 			Stm				::= "if" "(" Exp ")" Stm ;
SIfElse. 		Stm				::= "if" "(" Exp ")" Stm "else" Stm ;
SFor.		Stm				::= "for" "(" Stm Exp ";" Exp")" Stm;
STypeDef.	Stm				::= "typedef" TypeC Id ";" ;
SExp.		Stm				::= Exp ";" ;
terminator 	Stm "" ;

-- A statement body
BBlock.	        Body			::= "{" [Stm] "}" ;
BEmpty.    	Body			::= ";" ; 



EInt. 		Exp15			::= Integer ;
EDouble. 	Exp15			::= Double ;
EString.		Exp15			::= [String] ;
EChar.		Exp15			::= Char ;
ETrue. 		Exp15			::= "true" ;
EFalse. 		Exp15		    	::= "false" ;
EId. 		Exp15			::= Id ;
EApp. 		Exp15			::= Id "(" [Exp] ")" ;
EQConst.    	Exp15			::= QConst ;				-- 1
EIndex.		Exp14			::= Exp14 "["Exp"]" ;		-- 2
EProj.		Exp14			::= Exp14 "." Exp15 ;
EProj2.		Exp14			::= Exp15 "->" Exp14 ;
EPIncr. 		Exp14		    	::= Exp15 "++" ;
EPDecr. 	Exp14			::= Exp15 "--" ;
EIncr. 		Exp13			::= "++" Exp14 ;
EDecr. 		Exp13			::= "--" Exp14 ;
EPoint.		Exp13			::= "*" Id;   --2   Id??
ENot.		Exp13			::= "!" Exp14;
ERem	. 	Exp12			::= Exp12 "%" Exp13 ;
ETimes. 	Exp12			::= Exp12 "*" Exp13 ;
EDiv. 		Exp12			::= Exp12 "/" Exp13 ;
EPlus. 		Exp11			::= Exp11 "+" Exp12 ;
EMinus. 	Exp11			::= Exp11 "-" Exp12 ;
ELShift. 		Exp10		    	::= Exp10 "<<" Exp11 ;	-- 1
ERShift.		Exp10			::= Exp10 ">>" Exp11 ;	-- 1
ELt. 		Exp9			::= Exp9 "<" Exp10 ;
EGt. 		Exp9			::= Exp9 ">" Exp10 ;
ELtEq. 		Exp9			::= Exp9 "<=" Exp10 ;
EGtWq. 		Exp9			::= Exp9 ">=" Exp10 ;
EEq. 		Exp8			::= Exp8 "==" Exp9 ;
ENEq. 		Exp8			::= Exp8 "!=" Exp9 ;
EAnd. 		Exp4			::= Exp4 "&&" Exp5 ;
EOr. 		Exp3			::= Exp3 "||" Exp4 ;
EAss. 		Exp2			::= Exp3 "=" Exp2 ;
EAss2.		Exp2			::= Exp3 "+=" Exp2 ;
EAss3.		Exp2			::= Exp3 "-=" Exp2 ;
ECon.		Exp2			::= Exp3 "?" Exp2 ":" Exp2 ;
EThrow.		Exp1			::= "throw" Exp1;

coercions 	Exp 15 ;
separator 	Exp "," ;
separator   nonempty String  ""  ;


QCon.       	QConst			::= [Const];				-- 1

CId.   		Const			::= Id ;					-- 1

separator nonempty Const "::" ;				-- 1

-- Comments
comment "//" ;
comment "/*" "*/" ;
comment "#" ;


Tbool. 		Type		::= "bool" ;
Tdouble. 	Type		::= "double" ;
Tint. 		Type		::= "int" ;
Tvoid. 		Type		::= "void" ;
Tchar.		Type		::= "char" ;
Tconst.		Type		::= "const";
Tstring.		Type	    	::= Id ;  --2
TQconst. 	Type		::= QConst ;


Tref.		TypeC		::= Type "&" ;
Tconst1.	TypeC		::= "const" Type;
Tconst2.	TypeC		::= "const" Type"&" ;
Tref1.		TypeC		::= Type;



token Id (letter (letter | digit | '_' )*) ;
separator nonempty Id "," ;

