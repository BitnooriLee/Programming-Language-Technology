PDefs. Program ::= [Def] ;
terminator Def "" ;

comment "//" ;
comment "/*" "*/" ;
comment "#";

DFun. Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
separator Arg "," ;
terminator Stm "" ;

ADecl. Arg ::= Type Id ;

SExp. Stm ::= Exp ";" ;
SDecl. Stm ::= Type Id ";" ;
SDecls. Stm ::= Type Id "," [Id] ";" ;
SInit. Stm ::= Type Id "=" Exp ";" ;
SReturn. Stm ::= "return" Exp ";" ;
SWhile. Stm ::= "while" "(" Exp ")" Stm ;
SBlock. Stm ::= "{" [Stm] "}" ;
SIfElse. Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
separator Id "," ;

-- separator nonempty ...

EInt. Exp15   	::= Integer ;
EDouble. Exp15	::= Double ;
ETrue. Exp15	::= "true" ;
EFalse. Exp15	::= "false" ;
EIndex. Exp14 ::= Exp14 "[" Exp15 "]";
EFuncall. Exp14 ::= Exp14 "(" [Exp] ")";
EProject. Exp14	::= Exp14 "->" Exp15;
EStruc. Exp14	::= Exp14 "."  Exp15;
EPIncr. Exp14	::= Exp14 "++" ;
EPDecr. Exp14	::= Exp14 "--" ;
EIncr. Exp13		::= "++" Exp13 ;
EDecr. Exp13	::= "--" Exp13 ;
EDefren. Exp13		::= "*" Exp13 ;
ENegat. Exp13	::= "!" Exp13 ;
ETimes. Exp12	::= Exp12 "*" Exp13 ;
EDiv. Exp12	    	::= Exp12 "/" Exp13 ;
EDRemd. Exp12	 ::= Exp12 "%" Exp13 ;
EPlus. Exp11	::= Exp11 "+" Exp12 ;
EMinus. Exp11	::= Exp11 "-" Exp12 ;
EShiftLeft. Exp10 ::=Exp10 "<<" Exp11;
EShiftRight. Exp10 ::=Exp10 ">>" Exp11;
ELt. Exp9		::= Exp9 "<" Exp10 ;
EGt. Exp9		::= Exp9 ">" Exp10 ;
ELtEq. Exp9		::= Exp9 "<=" Exp10 ;
EGtWq. Exp9	::= Exp9 ">=" Exp10 ;
EEq. Exp8	     	::= Exp8 "==" Exp9 ;
ENEq. Exp8	     	::= Exp8 "!=" Exp9 ;
EAnd. Exp4	    	::= Exp4 "&&" Exp5 ;
EOr. Exp3	    	::= Exp3 "||" Exp4 ;
EAss. Exp2	    	::= Exp3 "=" Exp2 ;
EAssP. Exp2	    	::= Exp3 "+=" Exp2 ;
EAssM. Exp2	    	::= Exp3 "-=" Exp2 ;
ECond. Exp2 ::= Exp3 "?" Exp2 ":" Exp2;
EThrow. Exp1 ::= "throw" Exp1;
coercions Exp 15 ;
separator Exp "," ;

Tbool. Type   	::= "bool" ;
Tdouble. Type	::= "double" ;
Tint. Type	    	::= "int" ;
Tvoid. Type		::= "void" ;

token Id (letter (letter | digit | '_')*) ;