

module AbsCpp where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DFun Type Id [Arg] [Stm]
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Type Id
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SDecl Type Id
    | SDecls Type Id [Id]
    | SInit Type Id Exp
    | SReturn Exp
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIfElse Exp Stm Stm
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EDouble Double
    | ETrue
    | EFalse
    | EIndex Exp Exp
    | EFuncall Exp [Exp]
    | EProject Exp Exp
    | EStruc Exp Exp
    | EPIncr Exp
    | EPDecr Exp
    | EIncr Exp
    | EDecr Exp
    | EDefren Exp
    | ENegat Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EDRemd Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | EShiftLeft Exp Exp
    | EShiftRight Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtWq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | EAssP Exp Exp
    | EAssM Exp Exp
    | ECond Exp Exp Exp
    | EThrow Exp
  deriving (Eq, Ord, Show, Read)

data Type = Tbool | Tdouble | Tint | Tvoid
  deriving (Eq, Ord, Show, Read)

